import Charset from '../../../../java/nio/charset/Charset.js';
import File from '../../../../java/io/File.js';
import FileFilter from '../../../../java/io/FileFilter.js';
import FileInputStream from '../../../../java/io/FileInputStream.js';
import FileOutputStream from '../../../../java/io/FileOutputStream.js';
import IOFileFilter from './filefilter/IOFileFilter.js';
import InputStream from '../../../../java/io/InputStream.js';
import LineIterator from './LineIterator.js';
import OutputStream from '../../../../java/io/OutputStream.js';
export default class FileUtils {
    static get $javaClass(): any;
    constructor();
    static get EMPTY_FILE_ARRAY(): Array<File>;
    static get ONE_EB(): number;
    static get ONE_EB_BI(): any;
    static get ONE_GB(): number;
    static get ONE_GB_BI(): any;
    static get ONE_KB(): number;
    static get ONE_KB_BI(): any;
    static get ONE_MB(): number;
    static get ONE_MB_BI(): any;
    static get ONE_PB(): number;
    static get ONE_PB_BI(): any;
    static get ONE_TB(): number;
    static get ONE_TB_BI(): any;
    static get ONE_YB(): any;
    static get ONE_ZB(): any;
    static byteCountToDisplaySize(size: any): string;
    static byteCountToDisplaySize(size: number): string;
    static checksum(file: File, checksum: any): any;
    static checksumCRC32(file: File): number;
    static cleanDirectory(directory: File): void;
    static contentEquals(file1: File, file2: File): boolean;
    static contentEqualsIgnoreEOL(file1: File, file2: File, charsetName: string): boolean;
    static convertFileCollectionToFileArray(files: Array<any>): Array<File>;
    static copyDirectory(srcDir: File, destDir: File): void;
    static copyDirectory(srcDir: File, destDir: File, preserveFileDate: boolean): void;
    static copyDirectory(srcDir: File, destDir: File, filter: FileFilter): void;
    static copyDirectory(srcDir: File, destDir: File, filter: FileFilter, preserveFileDate: boolean): void;
    static copyDirectoryToDirectory(srcDir: File, destDir: File): void;
    static copyFile(srcFile: File, destFile: File): void;
    static copyFile(input: File, output: OutputStream): number;
    static copyFile(srcFile: File, destFile: File, preserveFileDate: boolean): void;
    static copyFileToDirectory(srcFile: File, destDir: File): void;
    static copyFileToDirectory(srcFile: File, destDir: File, preserveFileDate: boolean): void;
    static copyInputStreamToFile(source: InputStream, destination: File): void;
    static copyToDirectory(src: File, destDir: File): void;
    static copyToDirectory(srcs: any, destDir: File): void;
    static copyToFile(source: InputStream, destination: File): void;
    static copyURLToFile(source: any, destination: File): void;
    static copyURLToFile(source: any, destination: File, connectionTimeout: number, readTimeout: number): void;
    static deleteDirectory(directory: File): void;
    static deleteQuietly(file: File): boolean;
    static directoryContains(directory: File, child: File): boolean;
    static forceDelete(file: File): void;
    static forceDeleteOnExit(file: File): void;
    static forceMkdir(directory: File): void;
    static forceMkdirParent(file: File): void;
    static getFile(names: Array<string>): File;
    static getFile(directory: File, names: Array<string>): File;
    static getTempDirectory(): File;
    static getTempDirectoryPath(): string;
    static getUserDirectory(): File;
    static getUserDirectoryPath(): string;
    static isFileNewer(file: File, timeMillis: number): boolean;
    static isFileNewer(file: File, date: any): boolean;
    static isFileNewer(file: File, reference: File): boolean;
    static isFileOlder(file: File, timeMillis: number): boolean;
    static isFileOlder(file: File, date: any): boolean;
    static isFileOlder(file: File, reference: File): boolean;
    static isSymlink(file: File): boolean;
    static iterateFiles(directory: File, extensions: Array<string>, recursive: boolean): any;
    static iterateFiles(directory: File, fileFilter: IOFileFilter, dirFilter: IOFileFilter): any;
    static iterateFilesAndDirs(directory: File, fileFilter: IOFileFilter, dirFilter: IOFileFilter): any;
    static lineIterator(file: File): LineIterator;
    static lineIterator(file: File, encoding: string): LineIterator;
    static listFiles(directory: File, fileFilter: IOFileFilter, dirFilter: IOFileFilter): Array<File>;
    static listFiles(directory: File, extensions: Array<string>, recursive: boolean): Array<File>;
    static listFilesAndDirs(directory: File, fileFilter: IOFileFilter, dirFilter: IOFileFilter): Array<File>;
    static moveDirectory(srcDir: File, destDir: File): void;
    static moveDirectoryToDirectory(src: File, destDir: File, createDestDir: boolean): void;
    static moveFile(srcFile: File, destFile: File): void;
    static moveFileToDirectory(srcFile: File, destDir: File, createDestDir: boolean): void;
    static moveToDirectory(src: File, destDir: File, createDestDir: boolean): void;
    static openInputStream(file: File): FileInputStream;
    static openOutputStream(file: File): FileOutputStream;
    static openOutputStream(file: File, append: boolean): FileOutputStream;
    static readFileToByteArray(file: File): Array<number>;
    static readFileToString(file: File): string;
    static readFileToString(file: File, encoding: string): string;
    static readFileToString(file: File, encoding: Charset): string;
    static readLines(file: File): Array<string>;
    static readLines(file: File, encoding: string): Array<string>;
    static readLines(file: File, encoding: Charset): Array<string>;
    static sizeOf(file: File): number;
    static sizeOfAsBigInteger(file: File): any;
    static sizeOfDirectory(directory: File): number;
    static sizeOfDirectoryAsBigInteger(directory: File): any;
    static toFile(url: any): File;
    static toFiles(urls: Array<any>): Array<File>;
    static toURLs(files: Array<File>): Array<any>;
    static touch(file: File): void;
    static waitFor(file: File, seconds: number): boolean;
    static write(file: File, data: any): void;
    static write(file: File, data: any, encoding: string): void;
    static write(file: File, data: any, encoding: Charset): void;
    static write(file: File, data: any, append: boolean): void;
    static write(file: File, data: any, encoding: string, append: boolean): void;
    static write(file: File, data: any, encoding: Charset, append: boolean): void;
    static writeByteArrayToFile(file: File, data: Array<number>): void;
    static writeByteArrayToFile(file: File, data: Array<number>, append: boolean): void;
    static writeByteArrayToFile(file: File, data: Array<number>, off: number, len: number): void;
    static writeByteArrayToFile(file: File, data: Array<number>, off: number, len: number, append: boolean): void;
    static writeLines(file: File, lines: Array<any>): void;
    static writeLines(file: File, encoding: string, lines: Array<any>): void;
    static writeLines(file: File, lines: Array<any>, lineEnding: string): void;
    static writeLines(file: File, lines: Array<any>, append: boolean): void;
    static writeLines(file: File, encoding: string, lines: Array<any>, append: boolean): void;
    static writeLines(file: File, lines: Array<any>, lineEnding: string, append: boolean): void;
    static writeLines(file: File, encoding: string, lines: Array<any>, lineEnding: string): void;
    static writeLines(file: File, encoding: string, lines: Array<any>, lineEnding: string, append: boolean): void;
    static writeStringToFile(file: File, data: string): void;
    static writeStringToFile(file: File, data: string, encoding: Charset): void;
    static writeStringToFile(file: File, data: string, encoding: string): void;
    static writeStringToFile(file: File, data: string, append: boolean): void;
    static writeStringToFile(file: File, data: string, encoding: Charset, append: boolean): void;
    static writeStringToFile(file: File, data: string, encoding: string, append: boolean): void;
}
